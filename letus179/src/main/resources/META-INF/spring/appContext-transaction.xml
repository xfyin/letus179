<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 
		事务管理器:管理sessionFactory
		通知: 切入什么类型事务
		AOP切面表达式
	 -->
	 
	 <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	 	<property name="sessionFactory" ref="sessionFactory" />
	 </bean>
	 
	 <!-- 配置通知,横切面的方法(此处的通知就是事务),Spring事务已经模块化,我们管理实现事务调用即可 -->
	 <tx:advice id="advice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<!-- 有就用,没有就创建一个新的 -->
	 		<tx:method name="save*" propagation="REQUIRED"/>
	 		<tx:method name="update*" propagation="REQUIRED"/>
	 		<tx:method name="delete*" propagation="REQUIRED"/>
	 		<tx:method name="*" propagation="NEVER" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 <!-- 上面的通知配置只配置了向哪些方法切入什么事务类型,但是没有配置包和类,
	 	    接下来配置切面表达式,格式  [访问修饰符] 返回类型  [包.]类.方法(参数) 
	  -->
	 <aop:config>
	 	<!-- 配置切入表达式 -->
	 	<aop:pointcut expression="execution(* cn.ioyou.service.*.*(..))" id="pointcut"/>
	 	<!-- 整合通知的方法配置,和切面表达式配置,完整事务切面表达式 -->
	 	<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	 	
	 	<!-- Lucene AOP切面 luceneServiceImpl 有所有的通知-->
	 	 <aop:aspect ref="luceneGoodsService">
	 		<!-- 插入切入 后置通知  当前执行GoodsServiceImpl.save()方法的时候 saveGoods后置动态切入(没有异常的情况下) -->
	 		<aop:after-returning method="save" pointcut="execution(* cn.ioyou.service.GoodsService.save(..))"/>
	 		<aop:after-returning method="delete" pointcut="execution(* cn.ioyou.service.GoodsService.delete(..))"/>
	 	</aop:aspect> 
	 </aop:config>
	 
	<!--  <aop:config>
    <aop:pointcut id="dbPointCut" expression="execution(* com.fang..service.*.*(..))" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="dbPointCut" order="2" />
    <aop:aspect ref="serviceAop" order="1">
      <aop:after-returning method="afterReturn" pointcut="execution(* com.fang..*.add*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.fang..*.add*(..))"
        throwing="ex" />
      <aop:after-returning method="afterReturn" pointcut="execution(* com.fang..*.modify*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.fang..*.modify*(..))"
        throwing="ex" />
      <aop:after-returning method="afterReturn" pointcut="execution(* com.fang..*.delete*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.fang..*.delete*(..))"
        throwing="ex" />
    </aop:aspect>
  </aop:config> -->
	 
	 
</beans>